<?php
declare(strict_types=1);

namespace Estimator\Command;

use Github\Client;
use Phpml\ModelManager;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;

final class EstimateRepositoryCommand extends Command
{
    private function writeCSVRow($handle, array $fields)
    {
        fputcsv($handle, $fields, ';');
    }

    private function cleanString(string $str): string
    {
        $str = preg_replace('/[\x00-\x1F\x7F]/u', '', $str);
        $str = str_replace(["\r", "\n"], ' ', $str);
        $str = preg_replace('/\s+/', ' ', $str);
        return trim($str);
    }

    private function formatNumber($number): string
    {
        return number_format($number, 0, ',', ' ');
    }

    private function formatCost($cost): string
    {
        return number_format($cost, 2, ',', ' ') . ' $';
    }

    private function exportToCSV(string $repoName, string $branch, array $commits, array $statistics, string $directory): string
    {
        if (!file_exists($directory)) {
            mkdir($directory, 0777, true);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        $timestamp = date('Y-m-d');
        $repoShortName = explode('/', $repoName)[1];
        $filename = sprintf('%s/%s_%s_%s.csv', $directory, $repoShortName, $branch, $timestamp);

        $handle = fopen($filename, 'w');
        fprintf($handle, chr(0xEF).chr(0xBB).chr(0xBF));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        $this->writeCSVRow($handle, ['–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è']);
        $this->writeCSVRow($handle, ['']);
        $this->writeCSVRow($handle, ['–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', $repoName]);
        $this->writeCSVRow($handle, ['–í–µ—Ç–∫–∞', $branch]);
        $this->writeCSVRow($handle, ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', date('d.m.Y H:i:s')]);
        $this->writeCSVRow($handle, ['']);

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        $this->writeCSVRow($handle, [
            '‚Ññ',
            '–•–µ—à –∫–æ–º–º–∏—Ç–∞',
            '–û–ø–∏—Å–∞–Ω–∏–µ',
            '–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫',
            '–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫',
            '–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤',
            '–°—Ç–æ–∏–º–æ—Å—Ç—å'
        ]);

        // –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–æ–≤
        foreach ($commits as $index => $commit) {
            $this->writeCSVRow($handle, [
                $index + 1,
                $commit['sha'],
                $this->cleanString($commit['message']),
                $commit['additions'],
                $commit['deletions'],
                $commit['files'],
                $this->formatCost($commit['cost'])
            ]);
        }

        // –ò—Ç–æ–≥–∏
        $this->writeCSVRow($handle, ['']);
        $this->writeCSVRow($handle, ['–ò–¢–û–ì–û']);
        $this->writeCSVRow($handle, ['–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤', $statistics['total_commits']]);
        $this->writeCSVRow($handle, ['–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫', $statistics['total_additions']]);
        $this->writeCSVRow($handle, ['–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫', $statistics['total_deletions']]);
        $this->writeCSVRow($handle, ['–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤', $statistics['total_files']]);
        $this->writeCSVRow($handle, ['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', $this->formatCost($statistics['total_cost'])]);
        $this->writeCSVRow($handle, ['–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', $this->formatCost($statistics['average_cost'])]);

        fclose($handle);
        return $filename;
    }protected function configure()
{
    $this->setName('estimate:repository')
        ->setDescription('–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')
        ->addArgument('repo', InputArgument::REQUIRED, 'github —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –ø—Ä–∏–º–µ—Ä: author/repo')
        ->addOption('branch', 'b', InputOption::VALUE_OPTIONAL, '–í–µ—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'master')
    ;
}

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        $output->getFormatter()->setStyle('success', new OutputFormatterStyle('green'));
        $output->getFormatter()->setStyle('info', new OutputFormatterStyle('blue'));
        $output->getFormatter()->setStyle('warning', new OutputFormatterStyle('yellow'));
        $output->getFormatter()->setStyle('metric', new OutputFormatterStyle('magenta'));

        if(!file_exists(__DIR__.'/../../data/model.dat')) {
            $output->writeln('<error>–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π train</error>');
            return 1;
        }

        [$author, $repo] = explode('/', $input->getArgument('repo'));
        $client = new Client();

        $token = $_ENV['REPO_TOKEN'] ?? null;
        if (!$token) {
            $output->writeln('<error>–¢–æ–∫–µ–Ω GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ REPO_TOKEN –≤ —Ñ–∞–π–ª .env</error>');
            return 1;
        }

        $client->authenticate($token, null, Client::AUTH_ACCESS_TOKEN);

        try {
            $user = $client->api('current_user')->show();
            $output->writeln(sprintf('‚úì <success>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub: —É—Å–ø–µ—à–Ω–æ (%s)</success>', $user['login']));
        } catch (\Exception $e) {
            $output->writeln('<error>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' . $e->getMessage() . '</error>');
            return 1;
        }

        $modelManager = new ModelManager();
        $estimator = $modelManager->restoreFromFile(__DIR__.'/../../data/model.dat');

        $output->writeln(sprintf("\nüìä <info>–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è %s</info>\n", $input->getArgument('repo')));

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
            $repoInfo = $client->api('repo')->show($author, $repo);
            $output->writeln('‚úì <success>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: —É—Å–ø–µ—à–Ω–æ</success>');

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
            $branches = $client->api('repo')->branches($author, $repo);
            $output->writeln("\n‚ÑπÔ∏è  <info>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:</info>");
            $branchNames = [];
            foreach ($branches as $branch) {
                $isDefault = $branch['name'] === $repoInfo['default_branch'];
                $branchNames[] = $branch['name'];
                $output->writeln(sprintf('  ‚Ä¢ %s%s',
                    $branch['name'],
                    $isDefault ? ' (–æ—Å–Ω–æ–≤–Ω–∞—è)' : ''
                ));
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            $branch = $input->getOption('branch');
            if (!in_array($branch, $branchNames)) {
                $output->writeln(sprintf('<warning>–í–µ—Ç–∫–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</warning>', $branch));
                $branch = $repoInfo['default_branch'];
                $output->writeln(sprintf('<info>–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É: %s</info>', $branch));
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            $output->writeln(sprintf("\n‚ö° <info>–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–µ—Ç–∫–∏ %s</info>", $branch));
            $page = 1;
            $perPage = 100;
            $allCommits = [];

            while (true) {
                $pageCommits = $client->api('repo')->commits()->all($author, $repo, [
                    'sha' => $branch,
                    'page' => $page,
                    'per_page' => $perPage
                ]);

                if (empty($pageCommits)) {
                    break;
                }

                $allCommits = array_merge($allCommits, $pageCommits);
                $page++;
            }

            if (empty($allCommits)) {
                $output->writeln('<error>–ö–æ–º–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</error>');
                return 1;
            }

            $commitsData = [];
            $totalAdditions = 0;
            $totalDeletions = 0;
            $totalFiles = 0;
            $commitCount = 0;
            $total = 0;foreach($allCommits as $index => $commit) {
                $detail = $client->api('repo')->commits()->show($author, $repo, $commit['sha']);
                $stats = $detail['stats'];
                $files = count($detail['files']);

                $prediction = $estimator->predict([[
                    1,
                    $stats['additions'],
                    $stats['deletions'],
                    $files,
                    0,
                    0
                ]]);

                $cost = round($prediction[0], 2);
                $total += $cost;
                $commitCount++;

                $totalAdditions += $stats['additions'];
                $totalDeletions += $stats['deletions'];
                $totalFiles += $files;

                $shortMessage = substr($commit['commit']['message'], 0, 50);
                if (strlen($commit['commit']['message']) > 50) {
                    $shortMessage .= '...';
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
                $commitsData[] = [
                    'sha' => substr($commit['sha'], 0, 8),
                    'message' => $shortMessage,
                    'additions' => $stats['additions'],
                    'deletions' => $stats['deletions'],
                    'files' => $files,
                    'cost' => $cost
                ];

                // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                $output->writeln(sprintf(
                    '[%d/%d] <info>%s</info> %s | +%d -%d | %d %s | %s',
                    $index + 1,
                    count($allCommits),
                    substr($commit['sha'], 0, 8),
                    $this->cleanString($shortMessage),
                    $stats['additions'],
                    $stats['deletions'],
                    $files,
                    $this->getFilesWord($files),
                    $this->formatCost($cost)
                ));
            }

            $statistics = [
                'total_commits' => $commitCount,
                'total_additions' => $totalAdditions,
                'total_deletions' => $totalDeletions,
                'total_files' => $totalFiles,
                'total_cost' => $total,
                'average_cost' => $total / $commitCount
            ];

            $reportDir = __DIR__ . '/../../data/' . $repo;
            $csvFile = $this->exportToCSV(
                $input->getArgument('repo'),
                $branch,
                $commitsData,
                $statistics,
                $reportDir
            );

            // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $output->writeln("\nüìä <info>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</info>");
            $output->writeln('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï§‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
            $output->writeln(sprintf('‚ïë –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤        ‚îÇ %-12s ‚ïë', $this->formatNumber($commitCount)));
            $output->writeln(sprintf('‚ïë –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫       ‚îÇ %-12s ‚ïë', $this->formatNumber($totalAdditions)));
            $output->writeln(sprintf('‚ïë –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫         ‚îÇ %-12s ‚ïë', $this->formatNumber($totalDeletions)));
            $output->writeln(sprintf('‚ïë –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤       ‚îÇ %-12s ‚ïë', $this->formatNumber($totalFiles)));
            $output->writeln(sprintf('‚ïë –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å       ‚îÇ %-12s ‚ïë', $this->formatCost($total)));
            $output->writeln(sprintf('‚ïë –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–º–º–∏—Ç–∞  ‚îÇ %-12s ‚ïë', $this->formatCost($total / $commitCount)));
            $output->writeln('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïß‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

            $output->writeln(sprintf("\nüíæ <success>–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s</success>", $csvFile));

            return 0;
        } catch (\Exception $e) {
            $output->writeln(sprintf('<error>–û—à–∏–±–∫–∞: %s</error>', $e->getMessage()));
            if ($output->isVerbose()) {
                $output->writeln('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:');
                $output->writeln($e->getTraceAsString());
            }
            return 1;
        }
    }

    private function getFilesWord(int $count): string
    {
        if ($count % 10 == 1 && $count % 100 != 11) {
            return '—Ñ–∞–π–ª';
        } else if ($count % 10 >= 2 && $count % 10 <= 4 && ($count % 100 < 10 || $count % 100 >= 20)) {
            return '—Ñ–∞–π–ª–∞';
        } else {
            return '—Ñ–∞–π–ª–æ–≤';
        }
    }
}